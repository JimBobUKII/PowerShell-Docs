### YamlMime:PowershellCmdlet
summary: |-
  Sends ICMP echo request packets, or pings, to one or more computers.
module: Microsoft.PowerShell.Management
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: |-
    You can't pipe input to this cmdlet.
outputs:
- name: <xref href="TestConnectionCommand+PingReport, TestConnectionCommand+TraceRouteResult, Boolean, PingReply#MTUSize" data-throw-if-not-resolved="False" />
  description: |-
    If you specify the **Quiet** parameter, it returns a **Boolean** value. If multiple connections are
    tested, an array of **Boolean** values is returned. Otherwise, `Test-Connection` returns a
    **TestConnectionCommand+PingReport** object for each ping.
links:
- text: Restart-Computer
  href: Restart-Computer.yml
- text: Stop-Computer
  href: Stop-Computer.yml
syntaxes:
- >-
  Test-Connection [-Ping] [-IPv4] [-IPv6] [-ResolveDestination] [-Source <String>] [-MaxHops <Int32>]

   [-Count <Int32>] [-Delay <Int32>] [-BufferSize <Int32>] [-DontFragment] [-TimeoutSeconds <Int32>]

   [-TargetName] <String[]> [-Quiet] [<CommonParameters>]
- >-
  Test-Connection [-Ping] [-IPv4] [-IPv6] [-ResolveDestination] [-Source <String>] [-MaxHops <Int32>]

   [-Delay <Int32>] [-BufferSize <Int32>] [-DontFragment] [-Continues] [-TimeoutSeconds <Int32>]

   [-TargetName] <String[]> [-Quiet] [<CommonParameters>]
- >-
  Test-Connection [-IPv4] [-IPv6] [-ResolveDestination] [-TimeoutSeconds <Int32>]

   [-TargetName] <String[]> -MTUSizeDetect [-Quiet] [<CommonParameters>]
- >-
  Test-Connection [-IPv4] [-IPv6] [-ResolveDestination] [-Source <String>] [-MaxHops <Int32>]

   [-TimeoutSeconds <Int32>] [-TargetName] <String[]> -Traceroute [-Quiet] [<CommonParameters>]
- >-
  Test-Connection [-IPv4] [-IPv6] [-ResolveDestination] [-Source <String>] [-TimeoutSeconds <Int32>]

   [-TargetName] <String[]> -TCPPort <Int32> [-Quiet] [<CommonParameters>]
examples:
- title: 'Example 1: Send echo requests to a remote computer'
  code: |-
    Test-Connection -TargetName Server01 -IPv4

    Pinging Server01 [10.59.137.44] with 32 bytes of data:
    Reply from 10.59.137.44: bytes=32 time=0ms TTL=128
    Reply from 10.59.137.44: bytes=32 time=0ms TTL=128
    Reply from 10.59.137.44: bytes=32 time=0ms TTL=128
    Reply from 10.59.137.44: bytes=32 time=0ms TTL=128
    Ping complete.

    Source     Destination Replies
    ------     ----------- -------
    Server01   Server01    {System.Net.NetworkInformation.PingReply, System.Net.NetworkInformation ...
  description: |-
    `Test-Connection` uses the **TargetName** parameter to specify the Server01 computer. The **IPv4**
    parameter specifies the protocol for the test.

    The ping output is sent to the **Information** stream while the **TestConnectionCommand+PingReport**
    object sent to the **Success** stream. For more information about the output streams, see
    [about_Redirection](../microsoft.powershell.core/about/about_redirection.md).
  summary: |+
    This example sends echo request packets from the local computer to the Server01 computer.

- title: 'Example 2: Send echo requests to several computers'
  code: |-
    Test-Connection -TargetName Server01, Server02, Server12
  description: ""
  summary: |+
    This example sends pings from the local computer to several remote computers.

- title: 'Example 3: Send echo requests from several computers to a computer'
  code: |-
    Test-Connection -Source Server02, Server12, localhost -TargetName Server01
  description: |-
    Use this command format to test the latency of connections from multiple points.
  summary: |+
    This example sends pings from different source computers to a single remote computer, Server01.

- title: 'Example 4: Use parameters to customize the test command'
  code: |-
    Test-Connection -TargetName Server01 -Count 3 -Delay 2 -MaxHops 255 -BufferSize 256
  description: |-
    `Test-Connection` uses the **TargetName** parameter to specify Server01. The **Count** parameter
    specifies three pings are sent to the Server01 computer with a **Delay** of 2-second intervals.

    You might use these options when the ping response is expected to take longer than usual, either
    because of an extended number of hops or a high-traffic network condition.
  summary: |+
    This example uses the parameters of `Test-Connection` to customize the command. The local computer
    sends a ping test to a remote computer.

- title: 'Example 5: Run a test as a background job'
  code: |-
    $job = Start-Job -ScriptBlock { Test-Connection -TargetName (Get-Content "Servers.txt") }
    if ($job.JobStateInfo.State -ne "Running") { $Results = Receive-Job $job }
  description: |-
    The `Start-Job` command uses the `Test-Connection` cmdlet to ping many computers in an enterprise.
    The value of the **TargetName** parameter is a `Get-Content` command that reads a list of computer
    names from the `Servers.txt` file. The command uses the `Start-Job` cmdlet to run the command as a
    background job and it saves the job in the `$job` variable.

    The `if` command checks to see that the job isn't still running. If the job isn't running,
    `Receive-Job` gets the results and stores them in the `$Results` variable.
  summary: |+
    This example shows how to run a `Test-Connection` command as a PowerShell background job.

- title: 'Example 6: Create a session only if a connection test succeeds'
  code: |-
    if (Test-Connection -TargetName Server01 -Quiet) {New-PSSession Server01}
  description: |-
    The `if` command uses the `Test-Connection` cmdlet to ping the Server01 computer. The command uses
    the **Quiet** parameter, which returns a **Boolean** value, instead of a
    **TestConnectionCommand+PingReport** object.

    The value is `$True` if any of the four pings succeed. If none of the pings succeed, the value is
    `$False`.

    If the `Test-Connection` command returns a value of `$True`, the command uses the `New-PSSession`
    cmdlet to create the **PSSession**.
  summary: |+
    This example creates a session on the Server01 computer only if at least one of the pings sent to
    the computer succeeds.

- title: 'Example 7: Use the Traceroute parameter'
  code: |-
    Test-Connection -TargetName www.microsoft.com -Traceroute | ForEach-Object {
      $_ | Format-Table Source, DestinationAddress, DestinationHost
      $_.Replies | ForEach-Object {
          $_ | Format-Table Hop, ReplyRouterAddress
          $_.PingReplies | Format-Table
      }
    }

    Tracing route to www.microsoft.com [96.6.27.90] over a maximum of 128 hops:
      1   0 ms   0 ms   0 ms   192.168.0.3 [192.168.0.3]
      2   0 ms   0 ms   0 ms   192.168.1.1 [192.168.1.1]
      3   3 ms   29 ms   4 ms   96.6.27.90 [96.6.27.90]
    Trace complete.

    Source      DestinationAddress DestinationHost   Replies
    ------      ------------------ ---------------   -------
    SERVER01    96.6.27.90         www.microsoft.com {, , }

    Hop ReplyRouterAddress
    --- ------------------
      1 192.168.0.3

        Status Address      RoundtripTime Options Buffer
        ------ -------      ------------- ------- ------
    TtlExpired 192.168.86.1             0         {}
    TtlExpired 192.168.86.1             0         {}
    TtlExpired 192.168.86.1             0         {}

    Hop ReplyRouterAddress
    --- ------------------
      2 192.168.1.1

        Status Address     RoundtripTime Options Buffer
        ------ -------     ------------- ------- ------
    TtlExpired 192.168.1.1             0         {}
    TtlExpired 192.168.1.1             0         {}
    TtlExpired 192.168.1.1             0         {}

    Hop ReplyRouterAddress
    --- ------------------
      3 96.6.27.90

     Status Address    RoundtripTime Options                                   Buffer
     ------ -------    ------------- -------                                   ------
    Success 96.6.27.90             3 System.Net.NetworkInformation.PingOptions {97, 98, 99, 100…}
    Success 96.6.27.90             2 System.Net.NetworkInformation.PingOptions {97, 98, 99, 100…}
    Success 96.6.27.90             4 System.Net.NetworkInformation.PingOptions {97, 98, 99, 100…}
  description: |-
    The `Test-Connection` command uses the **Traceroute** parameter. The results, which are
    `[Microsoft.PowerShell.Commands.TestConnectionCommand+TraceRouteResult]` objects, are piped to the
    `ForEach-Object` cmdlet. `ForEach-Object` creates a structured output of the contained
    `[Microsoft.PowerShell.Commands.TestConnectionCommand+TraceRouteReply]` objects and subsequent
    `[System.Net.NetworkInformation.PingReply]` objects.
  summary: |+
    Beginning in PowerShell 6.0, the **Traceroute** parameter maps a route between the local computer
    and the remote destination you specify with the **TargetName** parameter.

parameters:
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: BufferSize
  description: |+
    Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.

  defaultValue: "32"
  position: Named
  aliases: Size, Bytes, BS
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Continues
  description: |+
    Causes the cmdlet to send ping requests continuously. This parameter can't be used with the
    **Count** parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Count
  description: |+
    Specifies the number of echo requests to send. The default value is 4.

  defaultValue: "4"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Delay
  description: |+
    Specifies the interval between pings, in seconds.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: DontFragment
  description: |+
    This parameter sets the **Don't Fragment** flag in the IP header. You can use this parameter with
    the **BufferSize** parameter to test the Path MTU size. For more information about Path MTU, see the
    [Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: IPv4
  description: |+
    Forces the cmdlet to use the IPv4 protocol for the test.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: IPv6
  description: |+
    Forces the cmdlet to use the IPv6 protocol for the test.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: MaxHops
  description: |+
    Sets the maximum number of hops that an ICMP request message can be sent. The default value is
    controlled by the operating system. The default value for Windows 10 is 128 hops.

  defaultValue: 128 hops in Windows 10
  position: Named
  aliases: Ttl, TimeToLive, Hops
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: MTUSizeDetect
  isRequired: true
  description: |+
    This parameter is used to discover the Path MTU size. The cmdlet returns a **PingReply#MTUSize**
    object that contains the Path MTU size to the target. For more information about Path MTU, see the
    [Path MTU Discovery](https://wikipedia.org/wiki/Path_MTU_Discovery) article in wikipedia.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Ping
  description: |+
    Causes the cmdlet to do a ping test, which is the default action.

  defaultValue: Ping test
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Quiet
  description: |+
    The **Quiet** parameter returns a **Boolean** value in a **System.Boolean** object. Using this
    parameter suppresses all errors.

    Each connection that's tested returns a **Boolean** value. If the **TargetName** parameter
    specifies multiple computers, an array of **Boolean** values is returned.

    If **any** ping succeeds, `$True` is returned.

    If **all** pings fail, `$False` is returned.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: ResolveDestination
  description: |+
    Causes the cmdlet to attempt to resolve the DNS name of the target.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Source
  description: |+
    Specifies the names of the computers where the ping originates. Enter a comma-separated list of
    computer names. The default is the local computer.

  defaultValue: Local computer
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: TargetName
  isRequired: true
  description: |+
    Specifies the computers to test. Type the computer names or type IP addresses in IPv4 or IPv6
    format. Wildcard characters aren't permitted. This parameter is required. **ComputerName** is an
    alias for this parameter.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ComputerName
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: TCPPort
  isRequired: true
  description: |+
    Specifies the TCP port number on the target to be used in the TCP connection test. The cmdlet will
    attempt to make a TCP connection to the specified port on the target.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: TimeoutSeconds
  description: |+
    Sets the timeout value for the test. The test fails if a response isn't received before the timeout
    expires. The default is five seconds.

    This parameter was introduced in PowerShell 6.0.

  defaultValue: 5 seconds
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Traceroute
  isRequired: true
  description: |+
    Causes the cmdlet to do a traceroute test. When this parameter is used, the cmdlet returns a
    `TestConnectionCommand+TraceRouteResult` object.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.PowerShell.Management.Test-Connection
name: Test-Connection
description: |-
  The `Test-Connection` cmdlet sends Internet Control Message Protocol (ICMP) echo request packets, or
  pings, to one or more remote computers and returns the echo response replies. You can use this
  cmdlet to determine whether a particular computer can be contacted across an IP network.

  You can use the parameters of `Test-Connection` to specify both the sending and receiving computers,
  to run the command as a background job, to set a time-out and number of pings, and to configure the
  connection and authentication.

  Unlike the familiar **ping** command, `Test-Connection` returns a
  **TestConnectionCommand+PingReport** object that you can investigate in PowerShell. The **Quiet**
  parameter returns a **Boolean** value in a **System.Boolean** object for each tested connection. If
  multiple connections are tested, an array of **Boolean** values is returned.
metadata:
  external help file: Microsoft.PowerShell.Commands.Management.dll-Help.xml
  keywords: powershell,cmdlet
  Locale: en-US
  Module Name: Microsoft.PowerShell.Management
  ms.date: 11/12/2019
  online version: https://docs.microsoft.com/powershell/module/microsoft.powershell.management/test-connection?view=powershell-6&WT.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-Connection
